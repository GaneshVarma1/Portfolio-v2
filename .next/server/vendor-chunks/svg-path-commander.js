"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/svg-path-commander";
exports.ids = ["vendor-chunks/svg-path-commander"];
exports.modules = {

/***/ "(ssr)/./node_modules/svg-path-commander/dist/svg-path-commander.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/svg-path-commander/dist/svg-path-commander.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ A)\n/* harmony export */ });\nvar Qe = Object.defineProperty;\nvar Ze = (e, t, s)=>t in e ? Qe(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : e[t] = s;\nvar b = (e, t, s)=>Ze(e, typeof t != \"symbol\" ? t + \"\" : t, s);\nvar De = Object.defineProperty, Oe = (e, t, s)=>t in e ? De(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : e[t] = s, j = (e, t, s)=>Oe(e, typeof t != \"symbol\" ? t + \"\" : t, s);\nconst Be = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0,\n    m11: 1,\n    m12: 0,\n    m13: 0,\n    m14: 0,\n    m21: 0,\n    m22: 1,\n    m23: 0,\n    m24: 0,\n    m31: 0,\n    m32: 0,\n    m33: 1,\n    m34: 0,\n    m41: 0,\n    m42: 0,\n    m43: 0,\n    m44: 1,\n    is2D: !0,\n    isIdentity: !0\n}, Gt = (e)=>(e instanceof Float64Array || e instanceof Float32Array || Array.isArray(e) && e.every((t)=>typeof t == \"number\")) && [\n        6,\n        16\n    ].some((t)=>e.length === t), te = (e)=>e instanceof DOMMatrix || e instanceof C || typeof e == \"object\" && Object.keys(Be).every((t)=>e && t in e), lt = (e)=>{\n    const t = new C(), s = Array.from(e);\n    if (!Gt(s)) throw TypeError(`CSSMatrix: \"${s.join(\",\")}\" must be an array with 6/16 numbers.`);\n    if (s.length === 16) {\n        const [r, n, i, o, l, c, a, u, f, h, y, m, g, d, M, w] = s;\n        t.m11 = r, t.a = r, t.m21 = l, t.c = l, t.m31 = f, t.m41 = g, t.e = g, t.m12 = n, t.b = n, t.m22 = c, t.d = c, t.m32 = h, t.m42 = d, t.f = d, t.m13 = i, t.m23 = a, t.m33 = y, t.m43 = M, t.m14 = o, t.m24 = u, t.m34 = m, t.m44 = w;\n    } else if (s.length === 6) {\n        const [r, n, i, o, l, c] = s;\n        t.m11 = r, t.a = r, t.m12 = n, t.b = n, t.m21 = i, t.c = i, t.m22 = o, t.d = o, t.m41 = l, t.e = l, t.m42 = c, t.f = c;\n    }\n    return t;\n}, ee = (e)=>{\n    if (te(e)) return lt([\n        e.m11,\n        e.m12,\n        e.m13,\n        e.m14,\n        e.m21,\n        e.m22,\n        e.m23,\n        e.m24,\n        e.m31,\n        e.m32,\n        e.m33,\n        e.m34,\n        e.m41,\n        e.m42,\n        e.m43,\n        e.m44\n    ]);\n    throw TypeError(`CSSMatrix: \"${JSON.stringify(e)}\" is not a DOMMatrix / CSSMatrix / JSON compatible object.`);\n}, ne = (e)=>{\n    if (typeof e != \"string\") throw TypeError(`CSSMatrix: \"${JSON.stringify(e)}\" is not a string.`);\n    const t = String(e).replace(/\\s/g, \"\");\n    let s = new C();\n    const r = `CSSMatrix: invalid transform string \"${e}\"`;\n    return t.split(\")\").filter((n)=>n).forEach((n)=>{\n        const [i, o] = n.split(\"(\");\n        if (!o) throw TypeError(r);\n        const l = o.split(\",\").map((m)=>m.includes(\"rad\") ? parseFloat(m) * (180 / Math.PI) : parseFloat(m)), [c, a, u, f] = l, h = [\n            c,\n            a,\n            u\n        ], y = [\n            c,\n            a,\n            u,\n            f\n        ];\n        if (i === \"perspective\" && c && [\n            a,\n            u\n        ].every((m)=>m === void 0)) s.m34 = -1 / c;\n        else if (i.includes(\"matrix\") && [\n            6,\n            16\n        ].includes(l.length) && l.every((m)=>!Number.isNaN(+m))) {\n            const m = l.map((g)=>Math.abs(g) < 1e-6 ? 0 : g);\n            s = s.multiply(lt(m));\n        } else if (i === \"translate3d\" && h.every((m)=>!Number.isNaN(+m))) s = s.translate(c, a, u);\n        else if (i === \"translate\" && c && u === void 0) s = s.translate(c, a || 0, 0);\n        else if (i === \"rotate3d\" && y.every((m)=>!Number.isNaN(+m)) && f) s = s.rotateAxisAngle(c, a, u, f);\n        else if (i === \"rotate\" && c && [\n            a,\n            u\n        ].every((m)=>m === void 0)) s = s.rotate(0, 0, c);\n        else if (i === \"scale3d\" && h.every((m)=>!Number.isNaN(+m)) && h.some((m)=>m !== 1)) s = s.scale(c, a, u);\n        else if (// prop === \"scale\" && !Number.isNaN(x) && x !== 1 && z === undefined\n        // prop === \"scale\" && !Number.isNaN(x) && [x, y].some((n) => n !== 1) &&\n        i === \"scale\" && !Number.isNaN(c) && (c !== 1 || a !== 1) && u === void 0) {\n            const m = Number.isNaN(+a) ? c : a;\n            s = s.scale(c, m, 1);\n        } else if (i === \"skew\" && (c || !Number.isNaN(c) && a) && u === void 0) s = s.skew(c, a || 0);\n        else if ([\n            \"translate\",\n            \"rotate\",\n            \"scale\",\n            \"skew\"\n        ].some((m)=>i.includes(m)) && /[XYZ]/.test(i) && c && [\n            a,\n            u\n        ].every((m)=>m === void 0)) if (i === \"skewX\" || i === \"skewY\") s = s[i](c);\n        else {\n            const m = i.replace(/[XYZ]/, \"\"), g = i.replace(m, \"\"), d = [\n                \"X\",\n                \"Y\",\n                \"Z\"\n            ].indexOf(g), M = m === \"scale\" ? 1 : 0, w = [\n                d === 0 ? c : M,\n                d === 1 ? c : M,\n                d === 2 ? c : M\n            ];\n            s = s[m](...w);\n        }\n        else throw TypeError(r);\n    }), s;\n}, zt = (e, t)=>t ? [\n        e.a,\n        e.b,\n        e.c,\n        e.d,\n        e.e,\n        e.f\n    ] : [\n        e.m11,\n        e.m12,\n        e.m13,\n        e.m14,\n        e.m21,\n        e.m22,\n        e.m23,\n        e.m24,\n        e.m31,\n        e.m32,\n        e.m33,\n        e.m34,\n        e.m41,\n        e.m42,\n        e.m43,\n        e.m44\n    ], se = (e, t, s)=>{\n    const r = new C();\n    return r.m41 = e, r.e = e, r.m42 = t, r.f = t, r.m43 = s, r;\n}, re = (e, t, s)=>{\n    const r = new C(), n = Math.PI / 180, i = e * n, o = t * n, l = s * n, c = Math.cos(i), a = -Math.sin(i), u = Math.cos(o), f = -Math.sin(o), h = Math.cos(l), y = -Math.sin(l), m = u * h, g = -u * y;\n    r.m11 = m, r.a = m, r.m12 = g, r.b = g, r.m13 = f;\n    const d = a * f * h + c * y;\n    r.m21 = d, r.c = d;\n    const M = c * h - a * f * y;\n    return r.m22 = M, r.d = M, r.m23 = -a * u, r.m31 = a * y - c * f * h, r.m32 = a * h + c * f * y, r.m33 = c * u, r;\n}, ie = (e, t, s, r)=>{\n    const n = new C(), i = Math.sqrt(e * e + t * t + s * s);\n    if (i === 0) return n;\n    const o = e / i, l = t / i, c = s / i, a = r * (Math.PI / 360), u = Math.sin(a), f = Math.cos(a), h = u * u, y = o * o, m = l * l, g = c * c, d = 1 - 2 * (m + g) * h;\n    n.m11 = d, n.a = d;\n    const M = 2 * (o * l * h + c * u * f);\n    n.m12 = M, n.b = M, n.m13 = 2 * (o * c * h - l * u * f);\n    const w = 2 * (l * o * h - c * u * f);\n    n.m21 = w, n.c = w;\n    const x = 1 - 2 * (g + y) * h;\n    return n.m22 = x, n.d = x, n.m23 = 2 * (l * c * h + o * u * f), n.m31 = 2 * (c * o * h + l * u * f), n.m32 = 2 * (c * l * h - o * u * f), n.m33 = 1 - 2 * (y + m) * h, n;\n}, oe = (e, t, s)=>{\n    const r = new C();\n    return r.m11 = e, r.a = e, r.m22 = t, r.d = t, r.m33 = s, r;\n}, At = (e, t)=>{\n    const s = new C();\n    if (e) {\n        const r = e * Math.PI / 180, n = Math.tan(r);\n        s.m21 = n, s.c = n;\n    }\n    if (t) {\n        const r = t * Math.PI / 180, n = Math.tan(r);\n        s.m12 = n, s.b = n;\n    }\n    return s;\n}, ce = (e)=>At(e, 0), le = (e)=>At(0, e), _ = (e, t)=>{\n    const s = t.m11 * e.m11 + t.m12 * e.m21 + t.m13 * e.m31 + t.m14 * e.m41, r = t.m11 * e.m12 + t.m12 * e.m22 + t.m13 * e.m32 + t.m14 * e.m42, n = t.m11 * e.m13 + t.m12 * e.m23 + t.m13 * e.m33 + t.m14 * e.m43, i = t.m11 * e.m14 + t.m12 * e.m24 + t.m13 * e.m34 + t.m14 * e.m44, o = t.m21 * e.m11 + t.m22 * e.m21 + t.m23 * e.m31 + t.m24 * e.m41, l = t.m21 * e.m12 + t.m22 * e.m22 + t.m23 * e.m32 + t.m24 * e.m42, c = t.m21 * e.m13 + t.m22 * e.m23 + t.m23 * e.m33 + t.m24 * e.m43, a = t.m21 * e.m14 + t.m22 * e.m24 + t.m23 * e.m34 + t.m24 * e.m44, u = t.m31 * e.m11 + t.m32 * e.m21 + t.m33 * e.m31 + t.m34 * e.m41, f = t.m31 * e.m12 + t.m32 * e.m22 + t.m33 * e.m32 + t.m34 * e.m42, h = t.m31 * e.m13 + t.m32 * e.m23 + t.m33 * e.m33 + t.m34 * e.m43, y = t.m31 * e.m14 + t.m32 * e.m24 + t.m33 * e.m34 + t.m34 * e.m44, m = t.m41 * e.m11 + t.m42 * e.m21 + t.m43 * e.m31 + t.m44 * e.m41, g = t.m41 * e.m12 + t.m42 * e.m22 + t.m43 * e.m32 + t.m44 * e.m42, d = t.m41 * e.m13 + t.m42 * e.m23 + t.m43 * e.m33 + t.m44 * e.m43, M = t.m41 * e.m14 + t.m42 * e.m24 + t.m43 * e.m34 + t.m44 * e.m44;\n    return lt([\n        s,\n        r,\n        n,\n        i,\n        o,\n        l,\n        c,\n        a,\n        u,\n        f,\n        h,\n        y,\n        m,\n        g,\n        d,\n        M\n    ]);\n};\nclass C {\n    /**\n   * @constructor\n   * @param init accepts all parameter configurations:\n   * * valid CSS transform string,\n   * * CSSMatrix/DOMMatrix instance,\n   * * a 6/16 elements *Array*.\n   */ constructor(t){\n        return this.a = 1, this.b = 0, this.c = 0, this.d = 1, this.e = 0, this.f = 0, this.m11 = 1, this.m12 = 0, this.m13 = 0, this.m14 = 0, this.m21 = 0, this.m22 = 1, this.m23 = 0, this.m24 = 0, this.m31 = 0, this.m32 = 0, this.m33 = 1, this.m34 = 0, this.m41 = 0, this.m42 = 0, this.m43 = 0, this.m44 = 1, t ? this.setMatrixValue(t) : this;\n    }\n    /**\n   * A `Boolean` whose value is `true` if the matrix is the identity matrix. The identity\n   * matrix is one in which every value is 0 except those on the main diagonal from top-left\n   * to bottom-right corner (in other words, where the offsets in each direction are equal).\n   *\n   * @return the current property value\n   */ get isIdentity() {\n        return this.m11 === 1 && this.m12 === 0 && this.m13 === 0 && this.m14 === 0 && this.m21 === 0 && this.m22 === 1 && this.m23 === 0 && this.m24 === 0 && this.m31 === 0 && this.m32 === 0 && this.m33 === 1 && this.m34 === 0 && this.m41 === 0 && this.m42 === 0 && this.m43 === 0 && this.m44 === 1;\n    }\n    /**\n   * A `Boolean` flag whose value is `true` if the matrix was initialized as a 2D matrix\n   * and `false` if the matrix is 3D.\n   *\n   * @return the current property value\n   */ get is2D() {\n        return this.m31 === 0 && this.m32 === 0 && this.m33 === 1 && this.m34 === 0 && this.m43 === 0 && this.m44 === 1;\n    }\n    /**\n   * The `setMatrixValue` method replaces the existing matrix with one computed\n   * in the browser. EG: `matrix(1,0.25,-0.25,1,0,0)`\n   *\n   * The method accepts any *Array* values, the result of\n   * `DOMMatrix` instance method `toFloat64Array()` / `toFloat32Array()` calls\n   * or `CSSMatrix` instance method `toArray()`.\n   *\n   * This method expects valid *matrix()* / *matrix3d()* string values, as well\n   * as other transform functions like *translateX(10px)*.\n   *\n   * @param source\n   * @return the matrix instance\n   */ setMatrixValue(t) {\n        return typeof t == \"string\" && t.length && t !== \"none\" ? ne(t) : Array.isArray(t) || t instanceof Float64Array || t instanceof Float32Array ? lt(t) : typeof t == \"object\" ? ee(t) : this;\n    }\n    /**\n   * Returns a *Float32Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param is2D *Array* representation of the matrix\n   * @return an *Array* representation of the matrix\n   */ toFloat32Array(t) {\n        return Float32Array.from(zt(this, t));\n    }\n    /**\n   * Returns a *Float64Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param is2D *Array* representation of the matrix\n   * @return an *Array* representation of the matrix\n   */ toFloat64Array(t) {\n        return Float64Array.from(zt(this, t));\n    }\n    /**\n   * Creates and returns a string representation of the matrix in `CSS` matrix syntax,\n   * using the appropriate `CSS` matrix notation.\n   *\n   * matrix3d *matrix3d(m11, m12, m13, m14, m21, ...)*\n   * matrix *matrix(a, b, c, d, e, f)*\n   *\n   * @return a string representation of the matrix\n   */ toString() {\n        const { is2D: t } = this, s = this.toFloat64Array(t).join(\", \");\n        return `${t ? \"matrix\" : \"matrix3d\"}(${s})`;\n    }\n    /**\n   * Returns a JSON representation of the `CSSMatrix` instance, a standard *Object*\n   * that includes `{a,b,c,d,e,f}` and `{m11,m12,m13,..m44}` properties as well\n   * as the `is2D` & `isIdentity` properties.\n   *\n   * The result can also be used as a second parameter for the `fromMatrix` static method\n   * to load values into another matrix instance.\n   *\n   * @return an *Object* with all matrix values.\n   */ toJSON() {\n        const { is2D: t, isIdentity: s } = this;\n        return {\n            ...this,\n            is2D: t,\n            isIdentity: s\n        };\n    }\n    /**\n   * The Multiply method returns a new CSSMatrix which is the result of this\n   * matrix multiplied by the passed matrix, with the passed matrix to the right.\n   * This matrix is not modified.\n   *\n   * @param m2 CSSMatrix\n   * @return The resulted matrix.\n   */ multiply(t) {\n        return _(this, t);\n    }\n    /**\n   * The translate method returns a new matrix which is this matrix post\n   * multiplied by a translation matrix containing the passed values. If the z\n   * component is undefined, a 0 value is used in its place. This matrix is not\n   * modified.\n   *\n   * @param x X component of the translation value.\n   * @param y Y component of the translation value.\n   * @param z Z component of the translation value.\n   * @return The resulted matrix\n   */ translate(t, s, r) {\n        const n = t;\n        let i = s, o = r;\n        return typeof i > \"u\" && (i = 0), typeof o > \"u\" && (o = 0), _(this, se(n, i, o));\n    }\n    /**\n   * The scale method returns a new matrix which is this matrix post multiplied by\n   * a scale matrix containing the passed values. If the z component is undefined,\n   * a 1 value is used in its place. If the y component is undefined, the x\n   * component value is used in its place. This matrix is not modified.\n   *\n   * @param x The X component of the scale value.\n   * @param y The Y component of the scale value.\n   * @param z The Z component of the scale value.\n   * @return The resulted matrix\n   */ scale(t, s, r) {\n        const n = t;\n        let i = s, o = r;\n        return typeof i > \"u\" && (i = t), typeof o > \"u\" && (o = 1), _(this, oe(n, i, o));\n    }\n    /**\n   * The rotate method returns a new matrix which is this matrix post multiplied\n   * by each of 3 rotation matrices about the major axes, first X, then Y, then Z.\n   * If the y and z components are undefined, the x value is used to rotate the\n   * object about the z axis, as though the vector (0,0,x) were passed. All\n   * rotation values are in degrees. This matrix is not modified.\n   *\n   * @param rx The X component of the rotation, or Z if Y and Z are null.\n   * @param ry The (optional) Y component of the rotation value.\n   * @param rz The (optional) Z component of the rotation value.\n   * @return The resulted matrix\n   */ rotate(t, s, r) {\n        let n = t, i = s || 0, o = r || 0;\n        return typeof t == \"number\" && typeof s > \"u\" && typeof r > \"u\" && (o = n, n = 0, i = 0), _(this, re(n, i, o));\n    }\n    /**\n   * The rotateAxisAngle method returns a new matrix which is this matrix post\n   * multiplied by a rotation matrix with the given axis and `angle`. The right-hand\n   * rule is used to determine the direction of rotation. All rotation values are\n   * in degrees. This matrix is not modified.\n   *\n   * @param x The X component of the axis vector.\n   * @param y The Y component of the axis vector.\n   * @param z The Z component of the axis vector.\n   * @param angle The angle of rotation about the axis vector, in degrees.\n   * @return The resulted matrix\n   */ rotateAxisAngle(t, s, r, n) {\n        if ([\n            t,\n            s,\n            r,\n            n\n        ].some((i)=>Number.isNaN(+i))) throw new TypeError(\"CSSMatrix: expecting 4 values\");\n        return _(this, ie(t, s, r, n));\n    }\n    /**\n   * Specifies a skew transformation along the `x-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param angle The angle amount in degrees to skew.\n   * @return The resulted matrix\n   */ skewX(t) {\n        return _(this, ce(t));\n    }\n    /**\n   * Specifies a skew transformation along the `y-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param angle The angle amount in degrees to skew.\n   * @return The resulted matrix\n   */ skewY(t) {\n        return _(this, le(t));\n    }\n    /**\n   * Specifies a skew transformation along both the `x-axis` and `y-axis`.\n   * This matrix is not modified.\n   *\n   * @param angleX The X-angle amount in degrees to skew.\n   * @param angleY The angle amount in degrees to skew.\n   * @return The resulted matrix\n   */ skew(t, s) {\n        return _(this, At(t, s));\n    }\n    /**\n   * Transforms a specified vector using the matrix, returning a new\n   * {x,y,z,w} Tuple *Object* comprising the transformed vector.\n   * Neither the matrix nor the original vector are altered.\n   *\n   * The method is equivalent with `transformPoint()` method\n   * of the `DOMMatrix` constructor.\n   *\n   * @param t Tuple with `{x,y,z,w}` components\n   * @return the resulting Tuple\n   */ transformPoint(t) {\n        const s = this.m11 * t.x + this.m21 * t.y + this.m31 * t.z + this.m41 * t.w, r = this.m12 * t.x + this.m22 * t.y + this.m32 * t.z + this.m42 * t.w, n = this.m13 * t.x + this.m23 * t.y + this.m33 * t.z + this.m43 * t.w, i = this.m14 * t.x + this.m24 * t.y + this.m34 * t.z + this.m44 * t.w;\n        return t instanceof DOMPoint ? new DOMPoint(s, r, n, i) : {\n            x: s,\n            y: r,\n            z: n,\n            w: i\n        };\n    }\n}\nj(C, \"Translate\", se), j(C, \"Rotate\", re), j(C, \"RotateAxisAngle\", ie), j(C, \"Scale\", oe), j(C, \"SkewX\", ce), j(C, \"SkewY\", le), j(C, \"Skew\", At), j(C, \"Multiply\", _), j(C, \"fromArray\", lt), j(C, \"fromMatrix\", ee), j(C, \"fromString\", ne), j(C, \"toArray\", zt), j(C, \"isCompatibleArray\", Gt), j(C, \"isCompatibleObject\", te);\nconst V = {\n    origin: [\n        0,\n        0,\n        0\n    ],\n    round: 4\n}, tt = {\n    a: 7,\n    c: 6,\n    h: 1,\n    l: 2,\n    m: 2,\n    r: 4,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    z: 0\n}, qt = (e)=>{\n    let t = e.pathValue[e.segmentStart], s = t.toLowerCase();\n    const { data: r } = e;\n    for(; r.length >= tt[s] && (s === \"m\" && r.length > 2 ? (e.segments.push([\n        t\n    ].concat(r.splice(0, 2))), s = \"l\", t = t === \"m\" ? \"l\" : \"L\") : e.segments.push([\n        t\n    ].concat(r.splice(0, tt[s]))), !!tt[s]););\n}, S = \"SVGPathCommander Error\", ae = (e)=>{\n    const { index: t, pathValue: s } = e, r = s.charCodeAt(t);\n    if (r === 48) {\n        e.param = 0, e.index += 1;\n        return;\n    }\n    if (r === 49) {\n        e.param = 1, e.index += 1;\n        return;\n    }\n    e.err = `${S}: invalid Arc flag \"${s[t]}\", expecting 0 or 1 at index ${t}`;\n}, U = (e)=>e >= 48 && e <= 57, J = \"Invalid path value\", ue = (e)=>{\n    const { max: t, pathValue: s, index: r } = e;\n    let n = r, i = !1, o = !1, l = !1, c = !1, a;\n    if (n >= t) {\n        e.err = `${S}: ${J} at index ${n}, \"pathValue\" is missing param`;\n        return;\n    }\n    if (a = s.charCodeAt(n), (a === 43 || a === 45) && (n += 1, a = s.charCodeAt(n)), !U(a) && a !== 46) {\n        e.err = `${S}: ${J} at index ${n}, \"${s[n]}\" is not a number`;\n        return;\n    }\n    if (a !== 46) {\n        if (i = a === 48, n += 1, a = s.charCodeAt(n), i && n < t && a && U(a)) {\n            e.err = `${S}: ${J} at index ${r}, \"${s[r]}\" illegal number`;\n            return;\n        }\n        for(; n < t && U(s.charCodeAt(n));)n += 1, o = !0;\n        a = s.charCodeAt(n);\n    }\n    if (a === 46) {\n        for(c = !0, n += 1; U(s.charCodeAt(n));)n += 1, l = !0;\n        a = s.charCodeAt(n);\n    }\n    if (a === 101 || a === 69) {\n        if (c && !o && !l) {\n            e.err = `${S}: ${J} at index ${n}, \"${s[n]}\" invalid float exponent`;\n            return;\n        }\n        if (n += 1, a = s.charCodeAt(n), (a === 43 || a === 45) && (n += 1), n < t && U(s.charCodeAt(n))) for(; n < t && U(s.charCodeAt(n));)n += 1;\n        else {\n            e.err = `${S}: ${J} at index ${n}, \"${s[n]}\" invalid integer exponent`;\n            return;\n        }\n    }\n    e.index = n, e.param = +e.pathValue.slice(r, n);\n}, me = (e)=>[\n        // Special spaces\n        5760,\n        6158,\n        8192,\n        8193,\n        8194,\n        8195,\n        8196,\n        8197,\n        8198,\n        8199,\n        8200,\n        8201,\n        8202,\n        8239,\n        8287,\n        12288,\n        65279,\n        // Line terminators\n        10,\n        13,\n        8232,\n        8233,\n        // White spaces\n        32,\n        9,\n        11,\n        12,\n        160\n    ].includes(e), et = (e)=>{\n    const { pathValue: t, max: s } = e;\n    for(; e.index < s && me(t.charCodeAt(e.index));)e.index += 1;\n}, fe = (e)=>{\n    switch(e | 32){\n        case 109:\n        case 122:\n        case 108:\n        case 104:\n        case 118:\n        case 99:\n        case 115:\n        case 113:\n        case 116:\n        case 97:\n            return !0;\n        default:\n            return !1;\n    }\n}, he = (e)=>U(e) || e === 43 || e === 45 || e === 46, ye = (e)=>(e | 32) === 97, ge = (e)=>{\n    switch(e | 32){\n        case 109:\n        case 77:\n            return !0;\n        default:\n            return !1;\n    }\n}, Dt = (e)=>{\n    var c;\n    const { max: t, pathValue: s, index: r, segments: n } = e, i = s.charCodeAt(r), o = tt[s[r].toLowerCase()];\n    if (e.segmentStart = r, !fe(i)) {\n        e.err = `${S}: ${J} \"${s[r]}\" is not a path command at index ${r}`;\n        return;\n    }\n    const l = n[n.length - 1];\n    if (!ge(i) && ((c = l == null ? void 0 : l[0]) == null ? void 0 : c.toLocaleLowerCase()) === \"z\") {\n        e.err = `${S}: ${J} \"${s[r]}\" is not a MoveTo path command at index ${r}`;\n        return;\n    }\n    if (e.index += 1, et(e), e.data = [], !o) {\n        qt(e);\n        return;\n    }\n    for(;;){\n        for(let a = o; a > 0; a -= 1){\n            if (ye(i) && (a === 3 || a === 4) ? ae(e) : ue(e), e.err.length) return;\n            e.data.push(e.param), et(e), e.index < t && s.charCodeAt(e.index) === 44 && (e.index += 1, et(e));\n        }\n        if (e.index >= e.max || !he(s.charCodeAt(e.index))) break;\n    }\n    qt(e);\n};\nclass Ot {\n    constructor(t){\n        this.segments = [], this.pathValue = t, this.max = t.length, this.index = 0, this.param = 0, this.segmentStart = 0, this.data = [], this.err = \"\";\n    }\n}\nconst Q = (e)=>{\n    if (typeof e != \"string\") return e.slice(0);\n    const t = new Ot(e);\n    for(et(t); t.index < t.max && !t.err.length;)Dt(t);\n    if (t != null && t.err.length) throw TypeError(t.err);\n    return t.segments;\n}, at = (e, t, s, r)=>{\n    const [n] = e, i = n.toUpperCase();\n    if (t === 0 || i === n) return e;\n    if (i === \"A\") return [\n        i,\n        e[1],\n        e[2],\n        e[3],\n        e[4],\n        e[5],\n        e[6] + s,\n        e[7] + r\n    ];\n    if (i === \"V\") return [\n        i,\n        e[1] + r\n    ];\n    if (i === \"H\") return [\n        i,\n        e[1] + s\n    ];\n    if (i === \"L\") return [\n        i,\n        e[1] + s,\n        e[2] + r\n    ];\n    {\n        const l = [], c = e.length;\n        for(let a = 1; a < c; a += 1)l.push(e[a] + (a % 2 ? s : r));\n        return [\n            i\n        ].concat(l);\n    }\n}, Z = (e, t)=>{\n    let s = e.length, r, n = \"M\", i = \"M\", o = !1, l = 0, c = 0, a = 0, u = 0, f = 0;\n    for(let h = 0; h < s; h += 1){\n        r = e[h], [n] = r, f = r.length, i = n.toUpperCase(), o = i !== n;\n        const y = t(r, h, l, c);\n        if (y === !1) break;\n        i === \"Z\" ? (l = a, c = u) : i === \"H\" ? l = r[1] + (o ? l : 0) : i === \"V\" ? c = r[1] + (o ? c : 0) : (l = r[f - 2] + (o ? l : 0), c = r[f - 1] + (o ? c : 0), i === \"M\" && (a = l, u = c)), y && (e[h] = y, y[0] === \"C\" && (s = e.length));\n    }\n    return e;\n}, ht = (e)=>{\n    const t = Q(e);\n    return Z(t, at);\n}, Bt = (e, t, s, r)=>{\n    const [n] = e, i = n.toLowerCase();\n    if (t === 0 || n === i) return e;\n    if (i === \"a\") return [\n        i,\n        e[1],\n        e[2],\n        e[3],\n        e[4],\n        e[5],\n        e[6] - s,\n        e[7] - r\n    ];\n    if (i === \"v\") return [\n        i,\n        e[1] - r\n    ];\n    if (i === \"h\") return [\n        i,\n        e[1] - s\n    ];\n    if (i === \"l\") return [\n        i,\n        e[1] - s,\n        e[2] - r\n    ];\n    {\n        const l = [], c = e.length;\n        for(let a = 1; a < c; a += 1)l.push(e[a] - (a % 2 ? s : r));\n        return [\n            i\n        ].concat(l);\n    }\n}, Kt = (e)=>{\n    const t = Q(e);\n    return Z(t, Bt);\n}, st = (e, t, s)=>{\n    const { sin: r, cos: n } = Math, i = e * n(s) - t * r(s), o = e * r(s) + t * n(s);\n    return {\n        x: i,\n        y: o\n    };\n}, Mt = (e, t, s, r, n, i, o, l, c, a)=>{\n    let u = e, f = t, h = s, y = r, m = l, g = c;\n    const d = Math.PI * 120 / 180, M = Math.PI / 180 * (+n || 0);\n    let w = [], x, p, L, T, I;\n    if (a) [p, L, T, I] = a;\n    else {\n        x = st(u, f, -M), u = x.x, f = x.y, x = st(m, g, -M), m = x.x, g = x.y;\n        const v = (u - m) / 2, O = (f - g) / 2;\n        let X = v * v / (h * h) + O * O / (y * y);\n        X > 1 && (X = Math.sqrt(X), h *= X, y *= X);\n        const Ct = h * h, $t = y * y, Jt = (i === o ? -1 : 1) * Math.sqrt(Math.abs((Ct * $t - Ct * O * O - $t * v * v) / (Ct * O * O + $t * v * v)));\n        T = Jt * h * O / y + (u + m) / 2, I = Jt * -y * v / h + (f + g) / 2, p = Math.asin(((f - I) / y * 10 ** 9 >> 0) / 10 ** 9), L = Math.asin(((g - I) / y * 10 ** 9 >> 0) / 10 ** 9), p = u < T ? Math.PI - p : p, L = m < T ? Math.PI - L : L, p < 0 && (p = Math.PI * 2 + p), L < 0 && (L = Math.PI * 2 + L), o && p > L && (p -= Math.PI * 2), !o && L > p && (L -= Math.PI * 2);\n    }\n    let R = L - p;\n    if (Math.abs(R) > d) {\n        const v = L, O = m, X = g;\n        L = p + d * (o && L > p ? 1 : -1), m = T + h * Math.cos(L), g = I + y * Math.sin(L), w = Mt(m, g, h, y, n, 0, o, O, X, [\n            L,\n            v,\n            T,\n            I\n        ]);\n    }\n    R = L - p;\n    const P = Math.cos(p), z = Math.sin(p), D = Math.cos(L), K = Math.sin(L), q = Math.tan(R / 4), N = 4 / 3 * h * q, $ = 4 / 3 * y * q, E = [\n        u,\n        f\n    ], B = [\n        u + N * z,\n        f - $ * P\n    ], F = [\n        m + N * K,\n        g - $ * D\n    ], G = [\n        m,\n        g\n    ];\n    if (B[0] = 2 * E[0] - B[0], B[1] = 2 * E[1] - B[1], a) return [\n        B[0],\n        B[1],\n        F[0],\n        F[1],\n        G[0],\n        G[1]\n    ].concat(w);\n    w = [\n        B[0],\n        B[1],\n        F[0],\n        F[1],\n        G[0],\n        G[1]\n    ].concat(w);\n    const W = [];\n    for(let v = 0, O = w.length; v < O; v += 1)W[v] = v % 2 ? st(w[v - 1], w[v], M).y : st(w[v], w[v + 1], M).x;\n    return W;\n}, xe = (e, t, s, r, n, i)=>{\n    const o = 0.3333333333333333, l = 2 / 3;\n    return [\n        o * e + l * s,\n        // cpx1\n        o * t + l * r,\n        // cpy1\n        o * n + l * s,\n        // cpx2\n        o * i + l * r,\n        // cpy2\n        n,\n        i\n    ];\n}, H = (e, t, s)=>{\n    const [r, n] = e, [i, o] = t;\n    return [\n        r + (i - r) * s,\n        n + (o - n) * s\n    ];\n}, Pt = (e, t, s, r)=>{\n    const n = H([\n        e,\n        t\n    ], [\n        s,\n        r\n    ], 0.3333333333333333), i = H([\n        e,\n        t\n    ], [\n        s,\n        r\n    ], 2 / 3);\n    return [\n        n[0],\n        n[1],\n        i[0],\n        i[1],\n        s,\n        r\n    ];\n}, pe = (e, t)=>{\n    const [s] = e, r = e.slice(1).map(Number), [n, i] = r, { x1: o, y1: l, x: c, y: a } = t;\n    return \"TQ\".includes(s) || (t.qx = null, t.qy = null), s === \"M\" ? (t.x = n, t.y = i, e) : s === \"A\" ? [\n        \"C\"\n    ].concat(Mt(o, l, r[0], r[1], r[2], r[3], r[4], r[5], r[6])) : s === \"Q\" ? (t.qx = n, t.qy = i, [\n        \"C\"\n    ].concat(xe(o, l, r[0], r[1], r[2], r[3]))) : s === \"L\" ? [\n        \"C\"\n    ].concat(Pt(o, l, n, i)) : s === \"Z\" ? [\n        \"C\"\n    ].concat(Pt(o, l, c, a)) : e;\n}, Nt = (e, t)=>{\n    const [s] = e, r = s.toUpperCase(), n = s !== r, { x1: i, y1: o, x2: l, y2: c, x: a, y: u } = t, f = e.slice(1);\n    let h = f.map((y, m)=>y + (n ? m % 2 ? u : a : 0));\n    if (\"TQ\".includes(r) || (t.qx = null, t.qy = null), r === \"A\") return h = f.slice(0, -2).concat(f[5] + (n ? a : 0), f[6] + (n ? u : 0)), [\n        \"A\"\n    ].concat(h);\n    if (r === \"H\") return [\n        \"L\",\n        e[1] + (n ? a : 0),\n        o\n    ];\n    if (r === \"V\") return [\n        \"L\",\n        i,\n        e[1] + (n ? u : 0)\n    ];\n    if (r === \"L\") return [\n        \"L\",\n        e[1] + (n ? a : 0),\n        e[2] + (n ? u : 0)\n    ];\n    if (r === \"M\") return [\n        \"M\",\n        e[1] + (n ? a : 0),\n        e[2] + (n ? u : 0)\n    ];\n    if (r === \"C\") return [\n        \"C\"\n    ].concat(h);\n    if (r === \"S\") {\n        const y = i * 2 - l, m = o * 2 - c;\n        return t.x1 = y, t.y1 = m, [\n            \"C\",\n            y,\n            m\n        ].concat(h);\n    } else if (r === \"T\") {\n        const y = i * 2 - (t.qx ? t.qx : /* istanbul ignore next */ 0), m = o * 2 - (t.qy ? t.qy : /* istanbul ignore next */ 0);\n        return t.qx = y, t.qy = m, [\n            \"Q\",\n            y,\n            m\n        ].concat(h);\n    } else if (r === \"Q\") {\n        const [y, m] = h;\n        return t.qx = y, t.qy = m, [\n            \"Q\"\n        ].concat(h);\n    } else if (r === \"Z\") return [\n        \"Z\"\n    ];\n    return e;\n}, ut = {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    x: 0,\n    y: 0,\n    qx: null,\n    qy: null\n}, yt = (e)=>{\n    const t = {\n        ...ut\n    }, s = Q(e);\n    return Z(s, (r, n, i, o)=>{\n        t.x = i, t.y = o;\n        const l = Nt(r, t);\n        let c = pe(l, t);\n        c[0] === \"C\" && c.length > 7 && (s.splice(n + 1, 0, [\n            \"C\"\n        ].concat(c.slice(7))), c = c.slice(0, 7));\n        const u = c.length;\n        return t.x1 = +c[u - 2], t.y1 = +c[u - 1], t.x2 = +c[u - 4] || t.x1, t.y2 = +c[u - 3] || t.y1, c;\n    });\n}, k = (e, t)=>{\n    const s = t >= 1 ? 10 ** t : 1;\n    return t > 0 ? Math.round(e * s) / s : Math.round(e);\n}, kt = (e, t)=>{\n    const s = e.length;\n    let { round: r } = V, n = e[0], i = \"\";\n    r = t === \"off\" || typeof t == \"number\" && t >= 0 ? t : typeof r == \"number\" && r >= 0 ? r : /* istanbul ignore next @preserve */ \"off\";\n    for(let o = 0; o < s; o += 1){\n        n = e[o];\n        const [l] = n, c = n.slice(1);\n        if (i += l, r === \"off\") i += c.join(\" \");\n        else {\n            let a = 0;\n            const u = c.length;\n            for(; a < u;)i += k(c[a], r), a !== u - 1 && (i += \" \"), a += 1;\n        }\n    }\n    return i;\n}, wt = (e, t)=>Math.sqrt((e[0] - t[0]) * (e[0] - t[0]) + (e[1] - t[1]) * (e[1] - t[1])), it = (e, t, s, r)=>wt([\n        e,\n        t\n    ], [\n        s,\n        r\n    ]), Ht = (e, t, s, r, n)=>{\n    let i = {\n        x: e,\n        y: t\n    };\n    if (typeof n == \"number\") {\n        const o = wt([\n            e,\n            t\n        ], [\n            s,\n            r\n        ]);\n        if (n <= 0) i = {\n            x: e,\n            y: t\n        };\n        else if (n >= o) i = {\n            x: s,\n            y: r\n        };\n        else {\n            const [l, c] = H([\n                e,\n                t\n            ], [\n                s,\n                r\n            ], n / o);\n            i = {\n                x: l,\n                y: c\n            };\n        }\n    }\n    return i;\n}, It = (e, t, s, r)=>{\n    const { min: n, max: i } = Math;\n    return [\n        n(e, s),\n        n(t, r),\n        i(e, s),\n        i(t, r)\n    ];\n}, Ft = (e, t, s)=>{\n    const r = s / 2, n = Math.sin(r), i = Math.cos(r), o = e ** 2 * n ** 2, l = t ** 2 * i ** 2, c = Math.sqrt(o + l) * s;\n    return Math.abs(c);\n}, Y = (e, t, s, r, n, i)=>{\n    const { sin: o, cos: l } = Math, c = l(n), a = o(n), u = s * l(i), f = r * o(i);\n    return [\n        e + c * u - a * f,\n        t + a * u + c * f\n    ];\n}, Et = (e, t)=>{\n    const { x: s, y: r } = e, { x: n, y: i } = t, o = s * n + r * i, l = Math.sqrt((s ** 2 + r ** 2) * (n ** 2 + i ** 2));\n    return (s * i - r * n < 0 ? -1 : 1) * Math.acos(o / l);\n}, Lt = (e, t, s, r, n, i, o, l, c)=>{\n    const { abs: a, sin: u, cos: f, sqrt: h, PI: y } = Math;\n    let m = a(s), g = a(r);\n    const M = (n % 360 + 360) % 360 * (y / 180);\n    if (e === l && t === c) return {\n        rx: m,\n        ry: g,\n        startAngle: 0,\n        endAngle: 0,\n        center: {\n            x: l,\n            y: c\n        }\n    };\n    if (m === 0 || g === 0) return {\n        rx: m,\n        ry: g,\n        startAngle: 0,\n        endAngle: 0,\n        center: {\n            x: (l + e) / 2,\n            y: (c + t) / 2\n        }\n    };\n    const w = (e - l) / 2, x = (t - c) / 2, p = {\n        x: f(M) * w + u(M) * x,\n        y: -u(M) * w + f(M) * x\n    }, L = p.x ** 2 / m ** 2 + p.y ** 2 / g ** 2;\n    L > 1 && (m *= h(L), g *= h(L));\n    const T = m ** 2 * g ** 2 - m ** 2 * p.y ** 2 - g ** 2 * p.x ** 2, I = m ** 2 * p.y ** 2 + g ** 2 * p.x ** 2;\n    let R = T / I;\n    R = R < 0 ? 0 : R;\n    const P = (i !== o ? 1 : -1) * h(R), z = {\n        x: P * (m * p.y / g),\n        y: P * (-(g * p.x) / m)\n    }, D = {\n        x: f(M) * z.x - u(M) * z.y + (e + l) / 2,\n        y: u(M) * z.x + f(M) * z.y + (t + c) / 2\n    }, K = {\n        x: (p.x - z.x) / m,\n        y: (p.y - z.y) / g\n    }, q = Et({\n        x: 1,\n        y: 0\n    }, K), N = {\n        x: (-p.x - z.x) / m,\n        y: (-p.y - z.y) / g\n    };\n    let $ = Et(K, N);\n    !o && $ > 0 ? $ -= 2 * y : o && $ < 0 && ($ += 2 * y), $ %= 2 * y;\n    const E = q + $;\n    return {\n        center: D,\n        startAngle: q,\n        endAngle: E,\n        rx: m,\n        ry: g\n    };\n}, _t = (e, t, s, r, n, i, o, l, c)=>{\n    const { rx: a, ry: u, startAngle: f, endAngle: h } = Lt(e, t, s, r, n, i, o, l, c);\n    return Ft(a, u, h - f);\n}, be = (e, t, s, r, n, i, o, l, c, a)=>{\n    let u = {\n        x: e,\n        y: t\n    };\n    const { center: f, rx: h, ry: y, startAngle: m, endAngle: g } = Lt(e, t, s, r, n, i, o, l, c);\n    if (typeof a == \"number\") {\n        const d = Ft(h, y, g - m);\n        if (a <= 0) u = {\n            x: e,\n            y: t\n        };\n        else if (a >= d) u = {\n            x: l,\n            y: c\n        };\n        else {\n            if (e === l && t === c) return {\n                x: l,\n                y: c\n            };\n            if (h === 0 || y === 0) return Ht(e, t, l, c, a);\n            const { PI: M, cos: w, sin: x } = Math, p = g - m, T = (n % 360 + 360) % 360 * (M / 180), I = m + p * (a / d), R = h * w(I), P = y * x(I);\n            u = {\n                x: w(T) * R - x(T) * P + f.x,\n                y: x(T) * R + w(T) * P + f.y\n            };\n        }\n    }\n    return u;\n}, de = (e, t, s, r, n, i, o, l, c)=>{\n    const { center: a, rx: u, ry: f, startAngle: h, endAngle: y } = Lt(e, t, s, r, n, i, o, l, c), m = y - h, { min: g, max: d, tan: M, atan2: w, PI: x } = Math, { x: p, y: L } = a, T = n * x / 180, I = M(T), R = w(-f * I, u), P = R, z = R + x, D = w(f, u * I), K = D + x;\n    let q = g(e, l), N = d(e, l), $ = g(t, c), E = d(t, c);\n    const B = y - m * 1e-3, F = Y(p, L, u, f, T, B), G = y - m * 0.999, W = Y(p, L, u, f, T, G);\n    if (F[0] > N || W[0] > N) {\n        const v = Y(p, L, u, f, T, P);\n        q = g(q, v[0]), $ = g($, v[1]), N = d(N, v[0]), E = d(E, v[1]);\n    }\n    if (F[0] < q || W[0] < q) {\n        const v = Y(p, L, u, f, T, z);\n        q = g(q, v[0]), $ = g($, v[1]), N = d(N, v[0]), E = d(E, v[1]);\n    }\n    if (F[1] < $ || W[1] < $) {\n        const v = Y(p, L, u, f, T, K);\n        q = g(q, v[0]), $ = g($, v[1]), N = d(N, v[0]), E = d(E, v[1]);\n    }\n    if (F[1] > E || W[1] > E) {\n        const v = Y(p, L, u, f, T, D);\n        q = g(q, v[0]), $ = g($, v[1]), N = d(N, v[0]), E = d(E, v[1]);\n    }\n    return [\n        q,\n        $,\n        N,\n        E\n    ];\n}, He = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    angleBetween: Et,\n    arcLength: Ft,\n    arcPoint: Y,\n    getArcBBox: de,\n    getArcLength: _t,\n    getArcProps: Lt,\n    getPointAtArcLength: be\n}, Symbol.toStringTag, {\n    value: \"Module\"\n})), Rt = [\n    -0.06405689286260563,\n    0.06405689286260563,\n    -0.1911188674736163,\n    0.1911188674736163,\n    -0.3150426796961634,\n    0.3150426796961634,\n    -0.4337935076260451,\n    0.4337935076260451,\n    -0.5454214713888396,\n    0.5454214713888396,\n    -0.6480936519369755,\n    0.6480936519369755,\n    -0.7401241915785544,\n    0.7401241915785544,\n    -0.820001985973903,\n    0.820001985973903,\n    -0.8864155270044011,\n    0.8864155270044011,\n    -0.9382745520027328,\n    0.9382745520027328,\n    -0.9747285559713095,\n    0.9747285559713095,\n    -0.9951872199970213,\n    0.9951872199970213\n], Ae = [\n    0.12793819534675216,\n    0.12793819534675216,\n    0.1258374563468283,\n    0.1258374563468283,\n    0.12167047292780339,\n    0.12167047292780339,\n    0.1155056680537256,\n    0.1155056680537256,\n    0.10744427011596563,\n    0.10744427011596563,\n    0.09761865210411388,\n    0.09761865210411388,\n    0.08619016153195327,\n    0.08619016153195327,\n    0.0733464814110803,\n    0.0733464814110803,\n    0.05929858491543678,\n    0.05929858491543678,\n    0.04427743881741981,\n    0.04427743881741981,\n    0.028531388628933663,\n    0.028531388628933663,\n    0.0123412297999872,\n    0.0123412297999872\n], Me = (e)=>{\n    const t = [];\n    for(let s = e, r = s.length, n = r - 1; r > 1; r -= 1, n -= 1){\n        const i = [];\n        for(let o = 0; o < n; o += 1)i.push({\n            x: n * (s[o + 1].x - s[o].x),\n            y: n * (s[o + 1].y - s[o].y),\n            t: 0\n        });\n        t.push(i), s = i;\n    }\n    return t;\n}, Ne = (e, t)=>{\n    if (t === 0) return e[0].t = 0, e[0];\n    const s = e.length - 1;\n    if (t === 1) return e[s].t = 1, e[s];\n    const r = 1 - t;\n    let n = e;\n    if (s === 0) return e[0].t = t, e[0];\n    if (s === 1) return {\n        x: r * n[0].x + t * n[1].x,\n        y: r * n[0].y + t * n[1].y,\n        t\n    };\n    const i = r * r, o = t * t;\n    let l = 0, c = 0, a = 0, u = 0;\n    return s === 2 ? (n = [\n        n[0],\n        n[1],\n        n[2],\n        {\n            x: 0,\n            y: 0\n        }\n    ], l = i, c = r * t * 2, a = o) : s === 3 && (l = i * r, c = i * t * 3, a = r * o * 3, u = t * o), {\n        x: l * n[0].x + c * n[1].x + a * n[2].x + u * n[3].x,\n        y: l * n[0].y + c * n[1].y + a * n[2].y + u * n[3].y,\n        t\n    };\n}, we = (e, t)=>{\n    const s = e(t), r = s.x * s.x + s.y * s.y;\n    return Math.sqrt(r);\n}, Le = (e)=>{\n    const s = Rt.length;\n    let r = 0;\n    for(let n = 0, i; n < s; n++)i = 0.5 * Rt[n] + 0.5, r += Ae[n] * we(e, i);\n    return 0.5 * r;\n}, mt = (e)=>{\n    const t = [];\n    for(let r = 0, n = e.length, i = 2; r < n; r += i)t.push({\n        x: e[r],\n        y: e[r + 1]\n    });\n    const s = Me(t);\n    return Le((r)=>Ne(s[0], r));\n}, ve = 1e-8, gt = ([e, t, s])=>{\n    const r = Math.min(e, s), n = Math.max(e, s);\n    if (t >= e ? s >= t : s <= t) return [\n        r,\n        n\n    ];\n    const i = (e * s - t * t) / (e - 2 * t + s);\n    return i < r ? [\n        i,\n        n\n    ] : [\n        r,\n        i\n    ];\n}, jt = ([e, t, s, r])=>{\n    const n = e - 3 * t + 3 * s - r;\n    if (Math.abs(n) < ve) return e === r && e === t ? [\n        e,\n        r\n    ] : gt([\n        e,\n        -0.5 * e + 1.5 * t,\n        e - 3 * t + 3 * s\n    ]);\n    const i = -e * s + e * r - t * s - t * r + t * t + s * s;\n    if (i <= 0) return [\n        Math.min(e, r),\n        Math.max(e, r)\n    ];\n    const o = Math.sqrt(i);\n    let l = Math.min(e, r), c = Math.max(e, r);\n    const a = e - 2 * t + s;\n    for(let u = (a + o) / n, f = 1; f <= 2; u = (a - o) / n, f++)if (u > 0 && u < 1) {\n        const h = e * (1 - u) * (1 - u) * (1 - u) + t * 3 * (1 - u) * (1 - u) * u + s * 3 * (1 - u) * u * u + r * u * u * u;\n        h < l && (l = h), h > c && (c = h);\n    }\n    return [\n        l,\n        c\n    ];\n}, Te = ([e, t, s, r, n, i, o, l], c)=>{\n    const a = 1 - c;\n    return {\n        x: a ** 3 * e + 3 * a ** 2 * c * s + 3 * a * c ** 2 * n + c ** 3 * o,\n        y: a ** 3 * t + 3 * a ** 2 * c * r + 3 * a * c ** 2 * i + c ** 3 * l\n    };\n}, xt = (e, t, s, r, n, i, o, l)=>mt([\n        e,\n        t,\n        s,\n        r,\n        n,\n        i,\n        o,\n        l\n    ]), Ce = (e, t, s, r, n, i, o, l, c)=>{\n    const a = typeof c == \"number\";\n    let u = {\n        x: e,\n        y: t\n    };\n    if (a) {\n        const f = mt([\n            e,\n            t,\n            s,\n            r,\n            n,\n            i,\n            o,\n            l\n        ]);\n        c <= 0 || (c >= f ? u = {\n            x: o,\n            y: l\n        } : u = Te([\n            e,\n            t,\n            s,\n            r,\n            n,\n            i,\n            o,\n            l\n        ], c / f));\n    }\n    return u;\n}, St = (e, t, s, r, n, i, o, l)=>{\n    const c = jt([\n        e,\n        s,\n        n,\n        o\n    ]), a = jt([\n        t,\n        r,\n        i,\n        l\n    ]);\n    return [\n        c[0],\n        a[0],\n        c[1],\n        a[1]\n    ];\n}, $e = ([e, t, s, r, n, i], o)=>{\n    const l = 1 - o;\n    return {\n        x: l ** 2 * e + 2 * l * o * s + o ** 2 * n,\n        y: l ** 2 * t + 2 * l * o * r + o ** 2 * i\n    };\n}, pt = (e, t, s, r, n, i)=>mt([\n        e,\n        t,\n        s,\n        r,\n        n,\n        i\n    ]), ze = (e, t, s, r, n, i, o)=>{\n    const l = typeof o == \"number\";\n    let c = {\n        x: e,\n        y: t\n    };\n    if (l) {\n        const a = mt([\n            e,\n            t,\n            s,\n            r,\n            n,\n            i\n        ]);\n        o <= 0 || (o >= a ? c = {\n            x: n,\n            y: i\n        } : c = $e([\n            e,\n            t,\n            s,\n            r,\n            n,\n            i\n        ], o / a));\n    }\n    return c;\n}, Qt = (e, t, s, r, n, i)=>{\n    const o = gt([\n        e,\n        s,\n        n\n    ]), l = gt([\n        t,\n        r,\n        i\n    ]);\n    return [\n        o[0],\n        l[0],\n        o[1],\n        l[1]\n    ];\n}, Fe = (e)=>{\n    const t = e.length;\n    let s = -1, r, n = e[t - 1], i = 0;\n    for(; ++s < t;)r = n, n = e[s], i += r[1] * n[0] - r[0] * n[1];\n    return i / 2;\n}, _e = (e)=>e.reduce((t, s, r)=>r ? t + wt(e[r - 1], s) : 0, 0), bt = 1e-5, ot = (e)=>{\n    const t = Q(e), s = {\n        ...ut\n    };\n    return Z(t, (r, n, i, o)=>{\n        s.x = i, s.y = o;\n        const l = Nt(r, s), c = l.length;\n        return s.x1 = +l[c - 2], s.y1 = +l[c - 1], s.x2 = +l[c - 4] || s.x1, s.y2 = +l[c - 3] || s.y1, l;\n    });\n}, rt = (e, t)=>{\n    const s = ot(e);\n    let r = !1, n = [], i = \"M\", o = 0, l = 0, [c, a] = s[0].slice(1);\n    const u = typeof t == \"number\";\n    let f = {\n        x: c,\n        y: a\n    }, h = 0, y = f, m = 0;\n    return !u || t < bt ? f : (Z(s, (g, d, M, w)=>{\n        if ([i] = g, r = i === \"M\", n = r ? n : [\n            M,\n            w\n        ].concat(g.slice(1)), r ? ([, c, a] = g, f = {\n            x: c,\n            y: a\n        }, h = 0) : i === \"L\" ? (f = Ht(n[0], n[1], n[2], n[3], t - m), h = it(n[0], n[1], n[2], n[3])) : i === \"A\" ? (f = be(n[0], n[1], n[2], n[3], n[4], n[5], n[6], n[7], n[8], t - m), h = _t(n[0], n[1], n[2], n[3], n[4], n[5], n[6], n[7], n[8])) : i === \"C\" ? (f = Ce(n[0], n[1], n[2], n[3], n[4], n[5], n[6], n[7], t - m), h = xt(n[0], n[1], n[2], n[3], n[4], n[5], n[6], n[7])) : i === \"Q\" ? (f = ze(n[0], n[1], n[2], n[3], n[4], n[5], t - m), h = pt(n[0], n[1], n[2], n[3], n[4], n[5])) : i === \"Z\" && (n = [\n            M,\n            w,\n            c,\n            a\n        ], f = {\n            x: c,\n            y: a\n        }, h = it(n[0], n[1], n[2], n[3])), [o, l] = n.slice(-2), m < t) y = f;\n        else return !1;\n        m += h;\n    }), t > m - bt ? {\n        x: o,\n        y: l\n    } : y);\n}, nt = (e)=>{\n    const t = Q(e);\n    let s = 0, r = 0, n = 0, i = 0, o = 0, l = 0, c = \"M\", a = 0, u = 0, f = 0;\n    return Z(t, (h, y, m, g)=>{\n        [c] = h;\n        const d = c.toUpperCase(), w = d !== c ? at(h, y, m, g) : h.slice(0), x = d === \"V\" ? [\n            \"L\",\n            m,\n            w[1]\n        ] : d === \"H\" ? [\n            \"L\",\n            w[1],\n            g\n        ] : w;\n        if ([c] = x, \"TQ\".includes(d) || (o = 0, l = 0), c === \"M\") [, a, u] = x;\n        else if (c === \"L\") f += it(m, g, x[1], x[2]);\n        else if (c === \"A\") f += _t(m, g, x[1], x[2], x[3], x[4], x[5], x[6], x[7]);\n        else if (c === \"S\") {\n            const p = s * 2 - n, L = r * 2 - i;\n            f += xt(m, g, p, L, x[1], x[2], x[3], x[4]);\n        } else c === \"C\" ? f += xt(m, g, x[1], x[2], x[3], x[4], x[5], x[6]) : c === \"T\" ? (o = s * 2 - o, l = r * 2 - l, f += pt(m, g, o, l, x[1], x[2])) : c === \"Q\" ? (o = x[1], l = x[2], f += pt(m, g, x[1], x[2], x[3], x[4])) : c === \"Z\" && (f += it(m, g, a, u));\n        [s, r] = c === \"Z\" ? [\n            a,\n            u\n        ] : x.slice(-2), [n, i] = c === \"C\" ? [\n            x[3],\n            x[4]\n        ] : c === \"S\" ? [\n            x[1],\n            x[2]\n        ] : [\n            s,\n            r\n        ];\n    }), f;\n}, Ut = (e, t)=>{\n    const s = Q(e);\n    let r = s.slice(0), n = nt(r), i = r.length - 1, o = 0, l = 0, c = s[0];\n    if (i <= 0 || !t || !Number.isFinite(t)) return {\n        segment: c,\n        index: 0,\n        length: l,\n        lengthAtSegment: o\n    };\n    if (t >= n) return r = s.slice(0, -1), o = nt(r), l = n - o, c = s[i], {\n        segment: c,\n        index: i,\n        length: l,\n        lengthAtSegment: o\n    };\n    const a = [];\n    for(; i > 0;)c = r[i], r = r.slice(0, -1), o = nt(r), l = n - o, n = o, a.push({\n        segment: c,\n        index: i,\n        length: l,\n        lengthAtSegment: o\n    }), i -= 1;\n    return a.find(({ lengthAtSegment: u })=>u <= t);\n}, vt = (e, t)=>{\n    const s = Q(e), r = ot(s), n = nt(r), i = (p)=>{\n        const L = p.x - t.x, T = p.y - t.y;\n        return L * L + T * T;\n    };\n    let o = 8, l, c = {\n        x: 0,\n        y: 0\n    }, a = 0, u = 0, f = 1 / 0;\n    for(let p = 0; p <= n; p += o)l = rt(r, p), a = i(l), a < f && (c = l, u = p, f = a);\n    o /= 2;\n    let h, y, m = 0, g = 0, d = 0, M = 0;\n    for(; o > 1e-6 && (m = u - o, h = rt(r, m), d = i(h), g = u + o, y = rt(r, g), M = i(y), m >= 0 && d < f ? (c = h, u = m, f = d) : g <= n && M < f ? (c = y, u = g, f = M) : o /= 2, !(o < 1e-5)););\n    const w = Ut(s, u), x = Math.sqrt(f);\n    return {\n        closest: c,\n        distance: x,\n        segment: w\n    };\n}, Ue = (e, t)=>vt(e, t).closest, Je = (e, t, s, r, n, i, o, l)=>3 * ((l - t) * (s + n) - (o - e) * (r + i) + r * (e - n) - s * (t - i) + l * (n + e / 3) - o * (i + t / 3)) / 20, qe = (e)=>{\n    let t = 0, s = 0, r = 0;\n    return yt(e).map((n)=>{\n        switch(n[0]){\n            case \"M\":\n                return [, t, s] = n, 0;\n            default:\n                return r = Je(t, s, n[1], n[2], n[3], n[4], n[5], n[6]), [t, s] = n.slice(-2), r;\n        }\n    }).reduce((n, i)=>n + i, 0);\n}, Ke = (e)=>qe(yt(e)) >= 0, Wt = (e)=>{\n    if (!e) return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        x2: 0,\n        y2: 0,\n        cx: 0,\n        cy: 0,\n        cz: 0\n    };\n    const t = Q(e);\n    let s = \"M\", r = 0, n = 0;\n    const { max: i, min: o } = Math;\n    let l = 1 / 0, c = 1 / 0, a = -1 / 0, u = -1 / 0, f = 0, h = 0, y = 0, m = 0, g = 0, d = 0, M = 0, w = 0, x = 0, p = 0;\n    Z(t, (I, R, P, z)=>{\n        [s] = I;\n        const D = s.toUpperCase(), q = D !== s ? at(I, R, P, z) : I.slice(0), N = D === \"V\" ? [\n            \"L\",\n            P,\n            q[1]\n        ] : D === \"H\" ? [\n            \"L\",\n            q[1],\n            z\n        ] : q;\n        if ([s] = N, \"TQ\".includes(D) || (x = 0, p = 0), s === \"M\") [, r, n] = N, f = r, h = n, y = r, m = n;\n        else if (s === \"L\") [f, h, y, m] = It(P, z, N[1], N[2]);\n        else if (s === \"A\") [f, h, y, m] = de(P, z, N[1], N[2], N[3], N[4], N[5], N[6], N[7]);\n        else if (s === \"S\") {\n            const $ = g * 2 - M, E = d * 2 - w;\n            [f, h, y, m] = St(P, z, $, E, N[1], N[2], N[3], N[4]);\n        } else s === \"C\" ? [f, h, y, m] = St(P, z, N[1], N[2], N[3], N[4], N[5], N[6]) : s === \"T\" ? (x = g * 2 - x, p = d * 2 - p, [f, h, y, m] = Qt(P, z, x, p, N[1], N[2])) : s === \"Q\" ? (x = N[1], p = N[2], [f, h, y, m] = Qt(P, z, N[1], N[2], N[3], N[4])) : s === \"Z\" && ([f, h, y, m] = It(P, z, r, n));\n        l = o(f, l), c = o(h, c), a = i(y, a), u = i(m, u), [g, d] = s === \"Z\" ? [\n            r,\n            n\n        ] : N.slice(-2), [M, w] = s === \"C\" ? [\n            N[3],\n            N[4]\n        ] : s === \"S\" ? [\n            N[1],\n            N[2]\n        ] : [\n            g,\n            d\n        ];\n    });\n    const L = a - l, T = u - c;\n    return {\n        width: L,\n        height: T,\n        x: l,\n        y: c,\n        x2: a,\n        y2: u,\n        cx: l + L / 2,\n        cy: c + T / 2,\n        // an estimated guess\n        cz: Math.max(L, T) + Math.min(L, T) / 2\n    };\n}, We = (e, t)=>Ut(e, t).segment, Xe = (e, t)=>vt(e, t).segment, Tt = (e)=>Array.isArray(e) && e.every((t)=>{\n        const s = t[0].toLowerCase();\n        return tt[s] === t.length - 1 && \"achlmqstvz\".includes(s) && t.slice(1).every(Number.isFinite);\n    }) && e.length > 0, Pe = (e)=>Tt(e) && // `isPathArray` also checks if it's `Array`\n    e.every(([t])=>t === t.toUpperCase()), ke = (e)=>Pe(e) && e.every(([t])=>\"ACLMQZ\".includes(t)), Ye = (e)=>ke(e) && e.every(([t])=>\"MC\".includes(t)), Ve = (e, t)=>{\n    const { distance: s } = vt(e, t);\n    return Math.abs(s) < bt;\n}, Ge = (e)=>Tt(e) && // `isPathArray` checks if it's `Array`\n    e.slice(1).every(([t])=>t === t.toLowerCase()), Ie = (e)=>{\n    if (typeof e != \"string\" || !e.length) return !1;\n    const t = new Ot(e);\n    for(et(t); t.index < t.max && !t.err.length;)Dt(t);\n    return !t.err.length && \"mM\".includes(t.segments[0][0]);\n}, ct = {\n    line: [\n        \"x1\",\n        \"y1\",\n        \"x2\",\n        \"y2\"\n    ],\n    circle: [\n        \"cx\",\n        \"cy\",\n        \"r\"\n    ],\n    ellipse: [\n        \"cx\",\n        \"cy\",\n        \"rx\",\n        \"ry\"\n    ],\n    rect: [\n        \"width\",\n        \"height\",\n        \"x\",\n        \"y\",\n        \"rx\",\n        \"ry\"\n    ],\n    polygon: [\n        \"points\"\n    ],\n    polyline: [\n        \"points\"\n    ],\n    glyph: [\n        \"d\"\n    ]\n}, Ee = (e)=>e != null && typeof e == \"object\" && e.nodeType === 1, tn = (e)=>{\n    let { x1: t, y1: s, x2: r, y2: n } = e;\n    return [t, s, r, n] = [\n        t,\n        s,\n        r,\n        n\n    ].map((i)=>+i), [\n        [\n            \"M\",\n            t,\n            s\n        ],\n        [\n            \"L\",\n            r,\n            n\n        ]\n    ];\n}, en = (e)=>{\n    const t = [], s = (e.points || \"\").trim().split(/[\\s|,]/).map((n)=>+n);\n    let r = 0;\n    for(; r < s.length;)t.push([\n        r ? \"L\" : \"M\",\n        s[r],\n        s[r + 1]\n    ]), r += 2;\n    return e.type === \"polygon\" ? [\n        ...t,\n        [\n            \"z\"\n        ]\n    ] : t;\n}, nn = (e)=>{\n    let { cx: t, cy: s, r } = e;\n    return [t, s, r] = [\n        t,\n        s,\n        r\n    ].map((n)=>+n), [\n        [\n            \"M\",\n            t - r,\n            s\n        ],\n        [\n            \"a\",\n            r,\n            r,\n            0,\n            1,\n            0,\n            2 * r,\n            0\n        ],\n        [\n            \"a\",\n            r,\n            r,\n            0,\n            1,\n            0,\n            -2 * r,\n            0\n        ]\n    ];\n}, sn = (e)=>{\n    let { cx: t, cy: s } = e, r = e.rx || 0, n = e.ry || r;\n    return [t, s, r, n] = [\n        t,\n        s,\n        r,\n        n\n    ].map((i)=>+i), [\n        [\n            \"M\",\n            t - r,\n            s\n        ],\n        [\n            \"a\",\n            r,\n            n,\n            0,\n            1,\n            0,\n            2 * r,\n            0\n        ],\n        [\n            \"a\",\n            r,\n            n,\n            0,\n            1,\n            0,\n            -2 * r,\n            0\n        ]\n    ];\n}, rn = (e)=>{\n    const t = +e.x || 0, s = +e.y || 0, r = +e.width, n = +e.height;\n    let i = +(e.rx || 0), o = +(e.ry || i);\n    return i || o ? (i * 2 > r && (i -= (i * 2 - r) / 2), o * 2 > n && (o -= (o * 2 - n) / 2), [\n        [\n            \"M\",\n            t + i,\n            s\n        ],\n        [\n            \"h\",\n            r - i * 2\n        ],\n        [\n            \"s\",\n            i,\n            0,\n            i,\n            o\n        ],\n        [\n            \"v\",\n            n - o * 2\n        ],\n        [\n            \"s\",\n            0,\n            o,\n            -i,\n            o\n        ],\n        [\n            \"h\",\n            -r + i * 2\n        ],\n        [\n            \"s\",\n            -i,\n            0,\n            -i,\n            -o\n        ],\n        [\n            \"v\",\n            -n + o * 2\n        ],\n        [\n            \"s\",\n            0,\n            -o,\n            i,\n            -o\n        ]\n    ]) : [\n        [\n            \"M\",\n            t,\n            s\n        ],\n        [\n            \"h\",\n            r\n        ],\n        [\n            \"v\",\n            n\n        ],\n        [\n            \"H\",\n            t\n        ],\n        [\n            \"Z\"\n        ]\n    ];\n}, Re = (e)=>{\n    const t = Object.keys(ct), s = Ee(e), r = s ? e.tagName : null;\n    if (r && [\n        ...t,\n        \"path\"\n    ].every((c)=>r !== c)) throw TypeError(`${S}: \"${r}\" is not SVGElement`);\n    const n = s ? r : e.type, i = ct[n], o = {\n        type: n\n    };\n    s ? i.forEach((c)=>{\n        o[c] = e.getAttribute(c);\n    }) : Object.assign(o, e);\n    let l = [];\n    return n === \"circle\" ? l = nn(o) : n === \"ellipse\" ? l = sn(o) : [\n        \"polyline\",\n        \"polygon\"\n    ].includes(n) ? l = en(o) : n === \"rect\" ? l = rn(o) : n === \"line\" ? l = tn(o) : [\n        \"glyph\",\n        \"path\"\n    ].includes(n) && (l = Q(s ? e.getAttribute(\"d\") || /* istanbul ignore next @preserve */ \"\" : e.d || \"\")), Tt(l) && l.length ? l : !1;\n}, on = (e, t, s)=>{\n    const r = s || document, n = Object.keys(ct), i = Ee(e), o = i ? e.tagName : null;\n    if (o === \"path\") throw TypeError(`${S}: \"${o}\" is already SVGPathElement`);\n    if (o && n.every((m)=>o !== m)) throw TypeError(`${S}: \"${o}\" is not SVGElement`);\n    const l = r.createElementNS(\"http://www.w3.org/2000/svg\", \"path\"), c = i ? o : e.type, a = ct[c], u = {\n        type: c\n    }, f = V.round, h = Re(e), y = h && h.length ? kt(h, f) : \"\";\n    return i ? (a.forEach((m)=>{\n        u[m] = e.getAttribute(m);\n    }), Object.values(e.attributes).forEach(({ name: m, value: g })=>{\n        a.includes(m) || l.setAttribute(m, g);\n    })) : (Object.assign(u, e), Object.keys(u).forEach((m)=>{\n        !a.includes(m) && m !== \"type\" && l.setAttribute(m.replace(/[A-Z]/g, (g)=>`-${g.toLowerCase()}`), u[m]);\n    })), Ie(y) ? (l.setAttribute(\"d\", y), t && i && (e.before(l, e), e.remove()), l) : !1;\n}, je = (e)=>{\n    let t = new C();\n    const { origin: s } = e, [r, n] = s, { translate: i } = e, { rotate: o } = e, { skew: l } = e, { scale: c } = e;\n    return Array.isArray(i) && i.length >= 2 && i.every((a)=>!Number.isNaN(+a)) && i.some((a)=>a !== 0) ? t = t.translate(...i) : typeof i == \"number\" && !Number.isNaN(i) && (t = t.translate(i)), (o || l || c) && (t = t.translate(r, n), Array.isArray(o) && o.length >= 2 && o.every((a)=>!Number.isNaN(+a)) && o.some((a)=>a !== 0) ? t = t.rotate(...o) : typeof o == \"number\" && !Number.isNaN(o) && (t = t.rotate(o)), Array.isArray(l) && l.length === 2 && l.every((a)=>!Number.isNaN(+a)) && l.some((a)=>a !== 0) ? (t = l[0] ? t.skewX(l[0]) : t, t = l[1] ? t.skewY(l[1]) : t) : typeof l == \"number\" && !Number.isNaN(l) && (t = t.skewX(l)), Array.isArray(c) && c.length >= 2 && c.every((a)=>!Number.isNaN(+a)) && c.some((a)=>a !== 1) ? t = t.scale(...c) : typeof c == \"number\" && !Number.isNaN(c) && (t = t.scale(c)), t = t.translate(-r, -n)), t;\n}, Se = (e, t, s, r)=>{\n    const [n] = e, { round: i } = V, o = typeof i == \"number\" ? i : /* istanbul ignore next */ 4, l = t.slice(1), { x1: c, y1: a, x2: u, y2: f, x: h, y } = s, [m, g] = l.slice(-2), d = e;\n    if (\"TQ\".includes(n) || (s.qx = null, s.qy = null), n === \"L\") {\n        if (k(h, o) === k(m, o)) return [\n            \"V\",\n            g\n        ];\n        if (k(y, o) === k(g, o)) return [\n            \"H\",\n            m\n        ];\n    } else if (n === \"C\") {\n        const [M, w] = l;\n        if (s.x1 = M, s.y1 = w, \"CS\".includes(r) && (k(M, o) === k(c * 2 - u, o) && k(w, o) === k(a * 2 - f, o) || k(c, o) === k(u * 2 - h, o) && k(a, o) === k(f * 2 - y, o))) return [\n            \"S\",\n            l[2],\n            l[3],\n            l[4],\n            l[5]\n        ];\n    } else if (n === \"Q\") {\n        const [M, w] = l;\n        if (s.qx = M, s.qy = w, \"QT\".includes(r) && k(M, o) === k(c * 2 - u, o) && k(w, o) === k(a * 2 - f, o)) return [\n            \"T\",\n            l[2],\n            l[3]\n        ];\n    }\n    return d;\n}, dt = (e, t)=>{\n    const s = e.slice(1).map((r)=>k(r, t));\n    return [\n        e[0]\n    ].concat(s);\n}, Xt = (e, t)=>{\n    const s = ht(e), r = typeof t == \"number\" && t >= 0 ? t : /* istanbul ignore next @preserve */ 2, n = {\n        ...ut\n    }, i = [];\n    let o = \"M\", l = \"Z\";\n    return Z(s, (c, a, u, f)=>{\n        n.x = u, n.y = f;\n        const h = Nt(c, n);\n        let y = c;\n        if ([o] = c, i[a] = o, a) {\n            l = i[a - 1];\n            const g = Se(c, h, n, l), d = dt(g, r), M = d.join(\"\"), w = Bt(g, a, u, f), x = dt(w, r), p = x.join(\"\");\n            y = M.length < p.length ? d : x;\n        }\n        const m = h.length;\n        return n.x1 = +h[m - 2], n.y1 = +h[m - 1], n.x2 = +h[m - 4] || n.x1, n.y2 = +h[m - 3] || n.y1, y;\n    });\n}, cn = (e, t)=>{\n    let s = C.Translate(t[0], t[1], t[2]);\n    return [, , , s.m44] = t, s = e.multiply(s), [\n        s.m41,\n        s.m42,\n        s.m43,\n        s.m44\n    ];\n}, Zt = (e, t, s)=>{\n    const [r, n, i] = s, [o, l, c] = cn(e, [\n        t[0],\n        t[1],\n        0,\n        1\n    ]), a = o - r, u = l - n, f = c - i;\n    return [\n        // protect against division by ZERO\n        a * (Math.abs(i) / Math.abs(f) || 1) + r,\n        u * (Math.abs(i) / Math.abs(f) || 1) + n\n    ];\n}, ln = (e)=>{\n    const t = e.slice(1).map((s, r, n)=>r ? n[r - 1].slice(-2).concat(s.slice(1)) : e[0].slice(1).concat(s.slice(1))).map((s)=>s.map((r, n)=>s[s.length - n - 2 * (1 - n % 2)])).reverse();\n    return [\n        [\n            \"M\"\n        ].concat(t[0].slice(0, 2))\n    ].concat(t.map((s)=>[\n            \"C\"\n        ].concat(s.slice(2))));\n}, ft = (e)=>{\n    const t = ht(e), s = ot(t), r = t.length, n = t[r - 1][0] === \"Z\", i = Z(t, (o, l)=>{\n        const c = s[l], a = l && t[l - 1], u = a && a[0], f = t[l + 1], h = f && f[0], [y] = o, [m, g] = s[l ? l - 1 : r - 1].slice(-2);\n        let d = o;\n        switch(y){\n            case \"M\":\n                d = n ? [\n                    \"Z\"\n                ] : [\n                    y,\n                    m,\n                    g\n                ];\n                break;\n            case \"A\":\n                d = [\n                    y,\n                    o[1],\n                    o[2],\n                    o[3],\n                    o[4],\n                    o[5] === 1 ? 0 : 1,\n                    m,\n                    g\n                ];\n                break;\n            case \"C\":\n                f && h === \"S\" ? d = [\n                    \"S\",\n                    o[1],\n                    o[2],\n                    m,\n                    g\n                ] : d = [\n                    y,\n                    o[3],\n                    o[4],\n                    o[1],\n                    o[2],\n                    m,\n                    g\n                ];\n                break;\n            case \"S\":\n                u && \"CS\".includes(u) && (!f || h !== \"S\") ? d = [\n                    \"C\",\n                    c[3],\n                    c[4],\n                    c[1],\n                    c[2],\n                    m,\n                    g\n                ] : d = [\n                    y,\n                    c[1],\n                    c[2],\n                    m,\n                    g\n                ];\n                break;\n            case \"Q\":\n                f && h === \"T\" ? d = [\n                    \"T\",\n                    m,\n                    g\n                ] : d = [\n                    y,\n                    o[1],\n                    o[2],\n                    m,\n                    g\n                ];\n                break;\n            case \"T\":\n                u && \"QT\".includes(u) && (!f || h !== \"T\") ? d = [\n                    \"Q\",\n                    c[1],\n                    c[2],\n                    m,\n                    g\n                ] : d = [\n                    y,\n                    m,\n                    g\n                ];\n                break;\n            case \"Z\":\n                d = [\n                    \"M\",\n                    m,\n                    g\n                ];\n                break;\n            case \"H\":\n                d = [\n                    y,\n                    m\n                ];\n                break;\n            case \"V\":\n                d = [\n                    y,\n                    g\n                ];\n                break;\n            default:\n                d = [\n                    y\n                ].concat(o.slice(1, -2), m, g);\n        }\n        return d;\n    });\n    return n ? i.reverse() : [\n        i[0]\n    ].concat(i.slice(1).reverse());\n}, an = (e, t)=>{\n    let { round: s } = V;\n    return s = t === \"off\" || typeof t == \"number\" && t >= 0 ? t : typeof s == \"number\" && s >= 0 ? s : /* istanbul ignore next @preserve */ \"off\", s === \"off\" ? e.slice(0) : Z(e, (r)=>dt(r, s));\n}, un = (e, t = 0.5)=>{\n    const s = t, r = e.slice(0, 2), n = e.slice(2, 4), i = e.slice(4, 6), o = e.slice(6, 8), l = H(r, n, s), c = H(n, i, s), a = H(i, o, s), u = H(l, c, s), f = H(c, a, s), h = H(u, f, s);\n    return [\n        [\n            \"C\",\n            l[0],\n            l[1],\n            u[0],\n            u[1],\n            h[0],\n            h[1]\n        ],\n        [\n            \"C\",\n            f[0],\n            f[1],\n            a[0],\n            a[1],\n            o[0],\n            o[1]\n        ]\n    ];\n}, Yt = (e)=>{\n    const t = [];\n    let s, r = -1, n = 0, i = 0, o = 0, l = 0;\n    const c = {\n        ...ut\n    };\n    return e.forEach((a)=>{\n        const [u] = a, f = u.toUpperCase(), h = u.toLowerCase(), y = u === h, m = a.slice(1);\n        f === \"M\" ? (r += 1, [n, i] = m, n += y ? c.x : 0, i += y ? c.y : 0, o = n, l = i, s = [\n            y ? [\n                f,\n                o,\n                l\n            ] : a\n        ]) : (f === \"Z\" ? (n = o, i = l) : f === \"H\" ? ([, n] = a, n += y ? c.x : /* istanbul ignore next @preserve */ 0) : f === \"V\" ? ([, i] = a, i += y ? c.y : /* istanbul ignore next @preserve */ 0) : ([n, i] = a.slice(-2), n += y ? c.x : 0, i += y ? c.y : 0), s.push(a)), c.x = n, c.y = i, t[r] = s;\n    }), t;\n}, Vt = (e, t)=>{\n    let s = 0, r = 0, n = 0, i = 0, o = 0, l = 0, c = \"M\";\n    const a = Q(e), u = t && Object.keys(t);\n    if (!t || u && !u.length) return a.slice(0);\n    t.origin || Object.assign(t, {\n        origin: V.origin\n    });\n    const f = t.origin, h = je(t);\n    return h.isIdentity ? a.slice(0) : Z(a, (y, m, g, d)=>{\n        [c] = y;\n        const M = c.toUpperCase(), x = M !== c ? at(y, m, g, d) : y.slice(0);\n        let p = M === \"A\" ? [\n            \"C\"\n        ].concat(Mt(g, d, x[1], x[2], x[3], x[4], x[5], x[6], x[7])) : M === \"V\" ? [\n            \"L\",\n            g,\n            x[1]\n        ] : M === \"H\" ? [\n            \"L\",\n            x[1],\n            d\n        ] : x;\n        c = p[0];\n        const L = c === \"C\" && p.length > 7, T = L ? p.slice(0, 7) : p.slice(0);\n        if (L && (a.splice(m + 1, 0, [\n            \"C\"\n        ].concat(p.slice(7))), p = T), c === \"L\") [n, i] = Zt(h, [\n            p[1],\n            p[2]\n        ], f), s !== n && r !== i ? p = [\n            \"L\",\n            n,\n            i\n        ] : r === i ? p = [\n            \"H\",\n            n\n        ] : s === n && (p = [\n            \"V\",\n            i\n        ]);\n        else for(o = 1, l = p.length; o < l; o += 2)[n, i] = Zt(h, [\n            +p[o],\n            +p[o + 1]\n        ], f), p[o] = n, p[o + 1] = i;\n        return s = n, r = i, p;\n    });\n};\nclass A {\n    /**\n   * @constructor\n   * @param pathValue the path string\n   * @param config instance options\n   */ constructor(t, s){\n        const r = s || {}, n = typeof t > \"u\";\n        if (n || !t.length) throw TypeError(`${S}: \"pathValue\" is ${n ? \"undefined\" : \"empty\"}`);\n        this.segments = Q(t);\n        const { round: i, origin: o } = r;\n        let l;\n        Number.isInteger(i) || i === \"off\" ? l = i : l = V.round;\n        let c = V.origin;\n        if (Array.isArray(o) && o.length >= 2) {\n            const [a, u, f] = o.map(Number);\n            c = [\n                Number.isNaN(a) ? 0 : a,\n                Number.isNaN(u) ? 0 : u,\n                Number.isNaN(f) ? 0 : f\n            ];\n        }\n        return this.round = l, this.origin = c, this;\n    }\n    get bbox() {\n        return Wt(this.segments);\n    }\n    get length() {\n        return nt(this.segments);\n    }\n    /**\n   * Returns the path bounding box, equivalent to native `path.getBBox()`.\n   *\n   * @public\n   * @returns the pathBBox\n   */ getBBox() {\n        return this.bbox;\n    }\n    /**\n   * Returns the total path length, equivalent to native `path.getTotalLength()`.\n   *\n   * @public\n   * @returns the path total length\n   */ getTotalLength() {\n        return this.length;\n    }\n    /**\n   * Returns an `{x,y}` point in the path stroke at a given length,\n   * equivalent to the native `path.getPointAtLength()`.\n   *\n   * @public\n   * @param length the length\n   * @returns the requested point\n   */ getPointAtLength(t) {\n        return rt(this.segments, t);\n    }\n    /**\n   * Convert path to absolute values\n   *\n   * @public\n   */ toAbsolute() {\n        const { segments: t } = this;\n        return this.segments = ht(t), this;\n    }\n    /**\n   * Convert path to relative values\n   *\n   * @public\n   */ toRelative() {\n        const { segments: t } = this;\n        return this.segments = Kt(t), this;\n    }\n    /**\n   * Convert path to cubic-bezier values. In addition, un-necessary `Z`\n   * segment is removed if previous segment extends to the `M` segment.\n   *\n   * @public\n   */ toCurve() {\n        const { segments: t } = this;\n        return this.segments = yt(t), this;\n    }\n    /**\n   * Reverse the order of the segments and their values.\n   *\n   * @param onlySubpath option to reverse all sub-paths except first\n   * @public\n   */ reverse(t) {\n        const { segments: s } = this, r = Yt(s), n = r.length > 1 ? r : !1, i = n ? n.map((l, c)=>t ? c ? ft(l) : l.slice(0) : ft(l)) : s.slice(0);\n        let o = [];\n        return n ? o = i.flat(1) : o = t ? s : ft(s), this.segments = o.slice(0), this;\n    }\n    /**\n   * Normalize path in 2 steps:\n   * * convert `pathArray`(s) to absolute values\n   * * convert shorthand notation to standard notation\n   *\n   * @public\n   */ normalize() {\n        const { segments: t } = this;\n        return this.segments = ot(t), this;\n    }\n    /**\n   * Optimize `pathArray` values:\n   * * convert segments to absolute and/or relative values\n   * * select segments with shortest resulted string\n   * * round values to the specified `decimals` option value\n   *\n   * @public\n   */ optimize() {\n        const { segments: t } = this, s = this.round === \"off\" ? 2 : this.round;\n        return this.segments = Xt(t, s), this;\n    }\n    /**\n   * Transform path using values from an `Object` defined as `transformObject`.\n   *\n   * @see TransformObject for a quick refference\n   *\n   * @param source a `transformObject`as described above\n   * @public\n   */ transform(t) {\n        if (!t || typeof t != \"object\" || typeof t == \"object\" && ![\n            \"translate\",\n            \"rotate\",\n            \"skew\",\n            \"scale\"\n        ].some((c)=>c in t)) return this;\n        const { segments: s, origin: [r, n, i] } = this, o = {};\n        for (const [c, a] of Object.entries(t))c === \"skew\" && Array.isArray(a) || (c === \"rotate\" || c === \"translate\" || c === \"origin\" || c === \"scale\") && Array.isArray(a) ? o[c] = a.map(Number) : c !== \"origin\" && typeof Number(a) == \"number\" && (o[c] = Number(a));\n        const { origin: l } = o;\n        if (Array.isArray(l) && l.length >= 2) {\n            const [c, a, u] = l.map(Number);\n            o.origin = [\n                Number.isNaN(c) ? r : c,\n                Number.isNaN(a) ? n : a,\n                u || i\n            ];\n        } else o.origin = [\n            r,\n            n,\n            i\n        ];\n        return this.segments = Vt(s, o), this;\n    }\n    /**\n   * Rotate path 180deg vertically\n   *\n   * @public\n   */ flipX() {\n        const { cx: t, cy: s } = this.bbox;\n        return this.transform({\n            rotate: [\n                0,\n                180,\n                0\n            ],\n            origin: [\n                t,\n                s,\n                0\n            ]\n        }), this;\n    }\n    /**\n   * Rotate path 180deg horizontally\n   *\n   * @public\n   */ flipY() {\n        const { cx: t, cy: s } = this.bbox;\n        return this.transform({\n            rotate: [\n                180,\n                0,\n                0\n            ],\n            origin: [\n                t,\n                s,\n                0\n            ]\n        }), this;\n    }\n    /**\n   * Export the current path to be used\n   * for the `d` (description) attribute.\n   *\n   * @public\n   * @return the path string\n   */ toString() {\n        return kt(this.segments, this.round);\n    }\n    /**\n   * Remove the instance.\n   *\n   * @public\n   * @return void\n   */ dispose() {\n        Object.keys(this).forEach((t)=>delete this[t]);\n    }\n}\nb(A, \"CSSMatrix\", C), b(A, \"pathToAbsolute\", ht), b(A, \"pathToRelative\", Kt), b(A, \"pathToCurve\", yt), b(A, \"pathToString\", kt), b(A, \"arcTools\", He), b(A, \"bezierTools\", {\n    Cvalues: Ae,\n    Tvalues: Rt,\n    minmaxC: jt,\n    minmaxQ: gt,\n    getBezierLength: mt,\n    bezierLength: Le,\n    calculateBezier: we,\n    computeBezier: Ne,\n    deriveBezier: Me,\n    CBEZIER_MINMAX_EPSILON: ve\n}), b(A, \"cubicTools\", {\n    getCubicLength: xt,\n    getCubicBBox: St,\n    getPointAtCubicLength: Ce,\n    getPointAtCubicSegmentLength: Te\n}), b(A, \"lineTools\", {\n    getPointAtLineLength: Ht,\n    getLineBBox: It,\n    getLineLength: it\n}), b(A, \"quadTools\", {\n    getPointAtQuadSegmentLength: $e,\n    getQuadLength: pt,\n    getQuadBBox: Qt,\n    getPointAtQuadLength: ze\n}), b(A, \"polygonTools\", {\n    polygonArea: Fe,\n    polygonLength: _e\n}), b(A, \"distanceSquareRoot\", wt), b(A, \"distanceEpsilon\", bt), b(A, \"midPoint\", H), b(A, \"rotateVector\", st), b(A, \"roundTo\", k), b(A, \"finalizeSegment\", qt), b(A, \"invalidPathValue\", J), b(A, \"isArcCommand\", ye), b(A, \"isDigit\", U), b(A, \"isDigitStart\", he), b(A, \"isMoveCommand\", ge), b(A, \"isPathCommand\", fe), b(A, \"isSpace\", me), b(A, \"paramsCount\", tt), b(A, \"paramsParser\", ut), b(A, \"pathParser\", Ot), b(A, \"scanFlag\", ae), b(A, \"scanParam\", ue), b(A, \"scanSegment\", Dt), b(A, \"skipSpaces\", et), b(A, \"getPathBBox\", Wt), b(A, \"getPathArea\", qe), b(A, \"getTotalLength\", nt), b(A, \"getDrawDirection\", Ke), b(A, \"getPointAtLength\", rt), b(A, \"getPropertiesAtLength\", Ut), b(A, \"getPropertiesAtPoint\", vt), b(A, \"getClosestPoint\", Ue), b(A, \"getSegmentOfPoint\", Xe), b(A, \"getSegmentAtLength\", We), b(A, \"isPointInStroke\", Ve), b(A, \"isValidPath\", Ie), b(A, \"isPathArray\", Tt), b(A, \"isAbsoluteArray\", Pe), b(A, \"isRelativeArray\", Ge), b(A, \"isCurveArray\", Ye), b(A, \"isNormalizedArray\", ke), b(A, \"shapeToPath\", on), b(A, \"shapeToPathArray\", Re), b(A, \"shapeParams\", ct), b(A, \"parsePathString\", Q), b(A, \"absolutizeSegment\", at), b(A, \"arcToCubic\", Mt), b(A, \"getSVGMatrix\", je), b(A, \"iterate\", Z), b(A, \"lineToCubic\", Pt), b(A, \"normalizePath\", ot), b(A, \"normalizeSegment\", Nt), b(A, \"optimizePath\", Xt), b(A, \"projection2d\", Zt), b(A, \"quadToCubic\", xe), b(A, \"relativizeSegment\", Bt), b(A, \"reverseCurve\", ln), b(A, \"reversePath\", ft), b(A, \"roundPath\", an), b(A, \"roundSegment\", dt), b(A, \"segmentToCubic\", pe), b(A, \"shortenSegment\", Se), b(A, \"splitCubic\", un), b(A, \"splitPath\", Yt), b(A, \"transformPath\", Vt);\n //# sourceMappingURL=svg-path-commander.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/svg-path-commander/dist/svg-path-commander.mjs\n");

/***/ })

};
;